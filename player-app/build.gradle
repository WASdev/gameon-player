apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

configurations {
    couchdb
    jmockit
    testCompile.extendsFrom jmockit
}

dependencies {
    providedCompile group:'javax.websocket', name:'javax.websocket-api', version:'1.1'
    providedCompile group:'javax.ws.rs', name:'javax.ws.rs-api', version:'2.0'
    providedCompile group:'javax.json', name:'javax.json-api', version:'1.0'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedCompile 'javax.annotation:javax.annotation-api:1.2'
    providedCompile 'javax.inject:javax.inject:1'
    providedCompile 'javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.0'
    providedCompile 'javax.enterprise:cdi-api:1.2'
    providedCompile 'io.swagger:swagger-annotations:1.5.0'

    //the entire couch & jackson dependency collection will not
    //be packaged in the app, but supplied as a shared library
    //to liberty. Thus this must be providedCompile.

    couchdb ('org.ektorp:org.ektorp:1.4.2') {
        exclude group: 'org.slf4j'
    }
    couchdb ('io.jsonwebtoken:jjwt:0.5.1') {
        exclude group: 'org.slf4j'
    }
    couchdb ('com.google.api-client:google-api-client:1.19.1') {
        exclude group: 'com.fasterxml.jackson'
        exclude group: 'org.slf4j'
    }
    couchdb 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.1.3'
    couchdb 'com.fasterxml.jackson.core:jackson-core:2.4.2'
    couchdb 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
    couchdb 'com.fasterxml.jackson.core:jackson-annotations:2.4.0'
    couchdb 'org.slf4j:slf4j-jdk14:1.7.13'
    couchdb 'org.slf4j:jcl-over-slf4j:1.7.13'

    providedCompile configurations.couchdb

    //anything not depending on jackson is safe to include via compile
    //dependencies from here..

    // kafka client =)
    compile ('org.apache.kafka:kafka-clients:0.9.0.1') {
      exclude group: 'org.slf4j'
    }

    jmockit 'org.jmockit:jmockit:1.22'
    testCompile 'junit:junit:4.12'
    testCompile 'org.glassfish:javax.json:1.0.4'
}

test {
   jvmArgs "-javaagent:${configurations.jmockit.singleFile.absolutePath}"
}

task exportLibs(type: Copy) {
  into "$buildDir/libs/"
  from configurations.couchdb
}

build.dependsOn(exportLibs)

// Keep test and application binaries separate
eclipse.classpath.file {
	withXml { xml ->
    	def node = xml.asNode()

    	Node src = node.find {it.@path == "src/main/java"}
  		src.@output ="bin/main"

    	Node testSrc = node.find {it.@path == "src/test/java"}
  		testSrc.@output ="bin/test"
	}
}

// Set the Eclipse facets to use 3.1 of the Dynamic Web Module which requires Java 1.7 (at least)
// Also include JAX-RS and javascript
eclipse.wtp.facet {
    // Clear default facets to work around bug where you get duplicates including wst 2.4
    facets = []
    facet name: 'jst.java', type: 'fixed'
    facet name: 'jst.web', type: 'fixed'
    facet name: 'jst.web', version: '3.1'
    facet name: 'jst.java', version: '1.8'
    facet name: 'jst.jaxrs', version: '2.0'
    facet name: 'wst.jsdt.web', type: 'fixed'
    facet name: 'wst.jsdt.web', version: '1.0'
}

// Add additional code conventions
eclipse.jdt.file {
    withProperties {
      it['org.eclipse.jdt.core.formatter.indentation.size'] = '4'
      it['org.eclipse.jdt.core.formatter.tabulation.size'] = '4'
      it['org.eclipse.jdt.core.formatter.tabulation.char'] = 'space'
      it['org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases'] = 'true'
      it['org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch'] = 'true'
      it['org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation'] = '18'
    }
}
